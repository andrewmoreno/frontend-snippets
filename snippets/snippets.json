{
  "context": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import { Context, createContext, useContext } from 'react';\n",
      "/**\n * `Props` type.\n */\n",
      "type Props = {\n\t$2\n};\n",
      "/**\n * Export `${1/(.*)/${1:/capitalize}/}Context` context.\n */\n",
      "export const ${1/(.*)/${1:/capitalize}/}Context: Context<Props> = createContext({} as Props);\n",
      "/**\n * Export `use${1/(.*)/${1:/capitalize}/}` hook.\n */\n",
      "export const use${1/(.*)/${1:/capitalize}/} = () => useContext(${1/(.*)/${1:/capitalize}/}Context);\n"
    ],
    "prefix": "context"
  },
  "docBlock": {
    "body": "\n/**\n * `$0`.\n */\n",
    "prefix": ["dok", "doc block"]
  },
  "exportConst": {
    "body": [
      "\n/**\n * Export `$1`.\n */\n",
      "export const $1 = $2"
    ],
    "prefix": "export const"
  },
  "exportInterface": {
    "body": [
      "\n/**\n * Export `${1/(.*)/${1:/capitalize}/}` interface.\n */\n",
      "export interface ${1/(.*)/${1:/capitalize}/} {\n\t$2\n}"
    ],
    "prefix": "export interface"
  },
  "exportType": {
    "body": [
      "\n/**\n * Export `${1/(.*)/${1:/capitalize}/}` type.\n */\n",
      "export type ${1/(.*)/${1:/capitalize}/} = {\n\t$2\n}"
    ],
    "prefix": "export type"
  },
  "fetchRequest": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import {\n\tacceptLanguageHeader,\n\thandleRequestError,\n\trequest",
      "} from 'src/core/utils/requests';\n",
      "import { getApiEndpoint } from 'src/core/utils/api-url-resolver';\n",
      "/**\n * `Options` type.\n */\n",
      "type Options = {\n\tlocale: string\n};\n",
      "/**\n * Export `fetch${1/(.*)/${1:/capitalize}/}`.\n */\n",
      "export async function fetch${1/(.*)/${1:/capitalize}/}({ locale }: Options) {",
      "\tconst endpoint = getApiEndpoint('$2');\n\ttry {",
      "\t\tconst { data } = await request.get(endpoint, {",
      "\t\t\theaders: acceptLanguageHeader(locale)\n\t\t});\n",
      "\t\treturn data?.data;\n\t} catch (error) {",
      "\t\t\thandleRequestError(error);\n\t}\n}"
    ],
    "prefix": "fetch request"
  },
  "getServerSideProps": {
    "body": [
      "\n/**\n * Export `getServerSideProps`.\n */\n",
      "export async function getServerSideProps({ locale }) {",
      "\tconst data = 'await fetchSomething';\n",
      "\tif (!data) {\n\t\treturn {\n\t\t\tnotFound: true\n\t\t};\n\t}\n",
      "\treturn {\n\t\tprops: {\n\t\t\tdata\n\t\t}\n\t};\n}"
    ],
    "prefix": "getServerSideProps"
  },
  "ifProp": {
    "body": "ifProp('$1', $2, $3)",
    "prefix": "ifProp"
  },
  "interface": {
    "body": [
      "\n/**\n * `${1/(.*)/${1:/capitalize}/}` interface.\n */\n",
      "interface ${1/(.*)/${1:/capitalize}/} {\n\t$2\n}"
    ],
    "prefix": "interface"
  },
  "isMobile": {
    "body": "const isMobile = use$2Breakpoint('md$1', 'max');",
    "prefix": "isMobile"
  },
  "moduleDependenciesDocBlock": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n\n"
    ],
    "prefix": "module dependencies"
  },
  "nextImageComponent": {
    "body": [
      "<Image",
      "\talt={''}",
      "\tlayout={'fill'}",
      "\tobjectFit={'cover'}",
      "\tsrc={''}",
      "/>"
    ],
    "prefix": "nextImageComponent"
  },
  "provider": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import { ${1/(.*)/${1:/capitalize}/}Context } from './context';",
      "import React, { ReactNode } from 'react';\n",
      "/**\n * `Props` type.\n */\n",
      "type Props = {\n\tchildren: ReactNode\n};\n",
      "/**\n * `${1/(.*)/${1:/capitalize}/}Provider` provider.\n */\n",
      "const ${1/(.*)/${1:/capitalize}/}Provider = ({ children }: Props) => {",
      "\treturn (",
      "\t\t<${1/(.*)/${1:/capitalize}/}Context.Provider value={{ $2 }}>",
      "\t\t\t{children}",
      "\t\t</${1/(.*)/${1:/capitalize}/}Context.Provider>",
      "\t);\n};\n",
      "/**\n * Export `${1/(.*)/${1:/capitalize}/}Provider` provider.\n */\n",
      "export default ${1/(.*)/${1:/capitalize}/}Provider;\n"
    ],
    "prefix": "provider"
  },
  "reactComponent": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import React, { ReactElement } from 'react';\n",
      "/**\n * `Props` type.\n */\n",
      "type Props = {\n\tclassName?: string\n};\n",
      "/**\n * `${1/(.*)/${1:/capitalize}/}` component.\n */\n",
      "const ${1/(.*)/${1:/capitalize}/} = ({ className }: Props): ReactElement => {",
      "\treturn (",
      "\t);\n};\n",
      "/**\n * Export `${1/(.*)/${1:/capitalize}/}` component.\n */\n",
      "export default ${1/(.*)/${1:/capitalize}/};\n"
    ],
    "prefix": ["rcc", "react component"]
  },
  "reactFunctionalComponent": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import { color, media, units } from '@untile/react-components';",
      "import { theme } from 'styled-tools';",
      "import React, { FC, ReactElement, forwardRef } from 'react';",
      "import styled from 'styled-components';\n",
      "/**\n * Export `${1/(.*)/${1:/capitalize}/}Props` interface.\n */\n",
      "export interface ${1/(.*)/${1:/capitalize}/}Props {\n\tclassName?: string;\n}\n",
      "/**\n * `Wrapper` styled component.\n */\n",
      "const Wrapper = styled.div`\n\tposition: relative;\n`;\n",
      "/**\n * `${1/(.*)/${1:/capitalize}/}` component.\n */\n",
      "const ${1/(.*)/${1:/capitalize}/}: FC<${1/(.*)/${1:/capitalize}/}Props> = forwardRef<any, ${1/(.*)/${1:/capitalize}/}Props>((props: ${1/(.*)/${1:/capitalize}/}Props, ref: any): ReactElement => {",
      "\tconst { className } = props;\n\n\treturn (",
      "\t\t<Wrapper\n\t\t\tclassName={className}\n\t\t\tref={ref}\n\t\t>",
      "\t\t\t$2\n\t\t</Wrapper>\n\t);\n};\n",
      "/**\n * `${1/(.*)/${1:/capitalize}/}` display name.",
      "*/\n\n${1/(.*)/${1:/capitalize}/}.displayName = '${1/(.*)/${1:/capitalize}/}';\n",
      "/**\n * Export `${1/(.*)/${1:/capitalize}/}` component.\n */\n",
      "export default ${1/(.*)/${1:/capitalize}/});\n"
    ],
    "prefix": ["rfc", "react functional component"]
  },
  "reactPage": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import { color, media, units } from '@untile/react-components';",
      "import { theme } from 'styled-tools';",
      "import React, { ReactElement } from 'react';",
      "import styled from 'styled-components';\n",
      "/**\n * `Wrapper` styled page.\n */\n",
      "const Wrapper = styled.section`\n\tposition: relative;\n`;\n",
      "/**\n * `${1/(.*)/${1:/capitalize}/}` page.\n */\n",
      "const ${1/(.*)/${1:/capitalize}/} = (): ReactElement => {",
      "\treturn (\n\t\t<>",
      "\t\t\t<Metatags\n\t\t\t\tpageTitle={title}\n\t\t\t\ttitle={title}\n\t\t\t/>\n",
      "\t\t\t<Wrapper>\n\t\t\t\t$2\n\t\t\t</Wrapper>",
      "\t\t</>\n\t);\n};\n",
      "/**\n * Export `${1/(.*)/${1:/capitalize}/}` page.\n */\n",
      "export default ${1/(.*)/${1:/capitalize}/};\n"
    ],
    "prefix": ["rcp", "react page"]
  },
  "styledComponent": {
    "body": [
      "\n/**\n * `${1/(.*)/${1:/capitalize}/}` styled component.\n */\n",
      "const ${1/(.*)/${1:/capitalize}/} = styled.$2`\n\t$3\n`\n"
    ],
    "prefix": "styled"
  },
  "styledImage": {
    "body": [
      "\n/**\n * `ImageWrapper` styled component.\n */\n",
      "const ImageWrapper = styled.div`",
      "\toverflow: hidden;\n\tpadding-bottom: 100%;\n\tposition: relative;",
      "`;"
    ],
    "prefix": "styled image"
  },
  "switchProp": {
    "body": [
      "switch$1Prop('$2', {",
      "\t$3: css`\n\t\t$4\n\t`",
      "})"
    ],
    "prefix": "switchProp"
  },
  "type": {
    "body": [
      "\n/**\n * `${1/(.*)/${1:/capitalize}/}` type.\n */\n",
      "type ${1/(.*)/${1:/capitalize}/} = {\n\t$2\n}"
    ],
    "prefix": "type"
  },
  "useCallback": {
    "body": "use$1Callback(() => {\n\t$2\n}, []);\n",
    "prefix": "useCallback"
  },
  "useEffect": {
    "body": "use$1Effect(() => {\n\t$2\n}, []);\n",
    "prefix": "useEffect"
  },
  "useMemo": {
    "body": "use$1Memo(() => {\n\t$2\n}, []);\n",
    "prefix": "useMemo"
  },
  "useQuery": {
    "body": [
      "const {",
      "\tdata,\n\tisLoading,\n\tisSuccess",
      "} = use${1/(.*)/${1:/capitalize}/}<$2>({ initialData: props.$3 })"
    ],
    "prefix": "use query"
  },
  "useRequest": {
    "body": [
      "\n/**\n * Module dependencies.\n */\n",
      "import { QueryObserverBaseResult, useQuery } from 'react-query';",
      "import { fetch${1/(.*)/${1:/capitalize}/} } from './fetch-$2';",
      "import { useMemo } from 'react';",
      "import { useRouter } from 'next/router';\n",
      "/**\n * `Props` type.\n */\n",
      "type Props<P> = QueryObserverBaseResult<P, unknown>;\n",
      "/**\n * `Options` type.\n */\n",
      "type Options<P> = {\n\tinitialData?: P | null\n};\n",
      "/**\n * Action type.\n */\n",
      "export const actionType = ({ locale }): string => {",
      "\treturn `${locale}-$2`\n;};\n",
      "/**\n * `use${1/(.*)/${1:/capitalize}/}` hook.\n */\n",
      "function use${1/(.*)/${1:/capitalize}/}<P>(options?: Options<P>): Props<P> {",
      "\tconst { locale } = useRouter();",
      "\tconst variables = useMemo(() => ({ locale }), [locale]);",
      "\tconst result = useQuery([actionType(variables), variables], () => {",
      "\t\treturn fetch${1/(.*)/${1:/capitalize}/}(variables);",
      "\t}, { initialData: options?.initialData });\n",
      "\treturn result;\n}\n",
      "/**\n * Export `use${1/(.*)/${1:/capitalize}/}` hook.\n */\n",
      "export default use${1/(.*)/${1:/capitalize}/};\n"
    ],
    "prefix": "use request"
  },
  "useState": {
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = use$2State<$3>();",
    "prefix": "useState"
  }
}
